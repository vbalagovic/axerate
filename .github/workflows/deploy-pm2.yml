name: Deploy with PM2 to Linux VPC

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Linux VPC
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Deploy Application
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          STRAPI_APP_KEYS: ${{ secrets.STRAPI_APP_KEYS }}
          STRAPI_API_TOKEN_SALT: ${{ secrets.STRAPI_API_TOKEN_SALT }}
          STRAPI_ADMIN_JWT_SECRET: ${{ secrets.STRAPI_ADMIN_JWT_SECRET }}
          STRAPI_TRANSFER_TOKEN_SALT: ${{ secrets.STRAPI_TRANSFER_TOKEN_SALT }}
          STRAPI_JWT_SECRET: ${{ secrets.STRAPI_JWT_SECRET }}
          STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}
          STRAPI_URL: ${{ secrets.STRAPI_URL }}
          STRAPI_PROXY: ${{ secrets.STRAPI_PROXY || 'true' }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << ENDSSH
            set -e

            # Export environment variables for use in this session
            export STRAPI_APP_KEYS="$STRAPI_APP_KEYS"
            export STRAPI_API_TOKEN_SALT="$STRAPI_API_TOKEN_SALT"
            export STRAPI_ADMIN_JWT_SECRET="$STRAPI_ADMIN_JWT_SECRET"
            export STRAPI_TRANSFER_TOKEN_SALT="$STRAPI_TRANSFER_TOKEN_SALT"
            export STRAPI_JWT_SECRET="$STRAPI_JWT_SECRET"
            export STRAPI_API_TOKEN="$STRAPI_API_TOKEN"
            export STRAPI_URL="$STRAPI_URL"
            export STRAPI_PROXY="$STRAPI_PROXY"

            echo "üì¶ Deploying to /var/www/html..."

            # Navigate to deployment directory
            cd /var/www/html

            # Initialize git repo if needed
            if [ ! -d .git ]; then
              echo "üîß Initializing git repository..."

              # Backup existing files if any
              if [ "$(ls -A)" ]; then
                echo "üì¶ Backing up existing files..."
                mkdir -p ~/backups
                tar -czf ~/backups/pre-deploy-$(date +%Y%m%d-%H%M%S).tar.gz ./* ./.* 2>/dev/null || true
              fi

              # Remove conflicting files
              rm -rf nginx docker-compose.yml strapi-backend/package-lock.json 2>/dev/null || true

              git init
              git remote add origin git@github.com:vbalagovic/axerate.git
              git fetch origin
              git checkout -b main origin/main
            else
              echo "üîÑ Pulling latest code..."

              # Check for untracked files that would conflict
              if ! git pull origin main 2>/dev/null; then
                echo "‚ö†Ô∏è  Merge conflict detected, cleaning up..."

                # Backup conflicting files
                mkdir -p ~/backups
                tar -czf ~/backups/conflict-backup-$(date +%Y%m%d-%H%M%S).tar.gz docker-compose.yml nginx strapi-backend/package-lock.json strapi-backend/package.json 2>/dev/null || true

                # Reset to clean state and force pull
                git reset --hard HEAD
                git clean -fd
                git pull origin main
              fi
            fi

            # Create .env files
            echo "üìù Creating environment files..."

            # Backend .env
            cat > strapi-backend/.env << EOF
          NODE_ENV=production
          HOST=0.0.0.0
          PORT=1337
          APP_KEYS=$STRAPI_APP_KEYS
          API_TOKEN_SALT=$STRAPI_API_TOKEN_SALT
          ADMIN_JWT_SECRET=$STRAPI_ADMIN_JWT_SECRET
          TRANSFER_TOKEN_SALT=$STRAPI_TRANSFER_TOKEN_SALT
          JWT_SECRET=$STRAPI_JWT_SECRET
          STRAPI_URL=$STRAPI_URL
          STRAPI_PROXY=$STRAPI_PROXY
          DATABASE_CLIENT=sqlite
          DATABASE_FILENAME=.tmp/data.db
          EOF

            # Frontend .env
            cat > axerate-nextjs/.env << EOF
          NODE_ENV=production
          NEXT_PUBLIC_STRAPI_URL=https://api.axerate.com
          STRAPI_API_URL=https://api.axerate.com
          STRAPI_API_TOKEN=$STRAPI_API_TOKEN
          NEXT_PUBLIC_SITE_URL=https://axerate.com
          NEXT_PUBLIC_GA_MEASUREMENT_ID=G-Q6DVJ7DVCX
          EOF

            # Install dependencies and build
            echo "üì¶ Installing dependencies..."

            # Backend
            cd strapi-backend

            # Clear cache to free memory
            rm -rf .cache build dist node_modules/.cache 2>/dev/null || true

            npm install  # Install ALL dependencies (including @types/node for build)

            # Build with appropriate memory limit for server (2.5GB for 4GB RAM server)
            npx strapi build

            npm prune --production  # Remove dev dependencies after build
            cd ..

            # Frontend
            cd axerate-nextjs
            npm install
            npm run build
            cd ..

            # Start/Restart with PM2
            echo "üöÄ Starting applications with PM2..."

            # Install PM2 if not installed
            if ! command -v pm2 &> /dev/null; then
                echo "Installing PM2..."
                npm install -g pm2
            fi

            # Start or restart applications
            pm2 delete strapi 2>/dev/null || true
            pm2 delete nextjs 2>/dev/null || true

            cd /var/www/html/strapi-backend
            pm2 start npm --name "strapi" -- start

            cd /var/www/html/axerate-nextjs
            pm2 start npm --name "nextjs" -- start

            # Save PM2 configuration
            pm2 save

            # Setup PM2 startup script
            pm2 startup systemd -u $USER --hp $HOME || true

            # Show status
            echo "‚úÖ Deployment complete!"
            pm2 list
          ENDSSH

      - name: Health Check
        run: |
          sleep 30
          curl -f http://${{ secrets.SSH_HOST }}:3000 || exit 1
          curl -f http://${{ secrets.SSH_HOST }}:1337/_health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "‚úÖ Deployment successful"
          else
            echo "‚ùå Deployment failed"
          fi
