name: Build and Deploy to Linux VPC

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  build-and-push:
    name: Build Docker Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Extract metadata for Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./axerate-nextjs
          file: ./axerate-nextjs/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./strapi-backend
          file: ./strapi-backend/Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Linux VPC
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SSH_HOST >> ~/.ssh/known_hosts

      - name: Deploy to VPC
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          STRAPI_APP_KEYS: ${{ secrets.STRAPI_APP_KEYS }}
          STRAPI_API_TOKEN_SALT: ${{ secrets.STRAPI_API_TOKEN_SALT }}
          STRAPI_ADMIN_JWT_SECRET: ${{ secrets.STRAPI_ADMIN_JWT_SECRET }}
          STRAPI_TRANSFER_TOKEN_SALT: ${{ secrets.STRAPI_TRANSFER_TOKEN_SALT }}
          STRAPI_JWT_SECRET: ${{ secrets.STRAPI_JWT_SECRET }}
          STRAPI_API_TOKEN: ${{ secrets.STRAPI_API_TOKEN }}
          NEXT_PUBLIC_STRAPI_URL: ${{ secrets.STRAPI_URL }}
          STRAPI_URL: ${{ secrets.STRAPI_URL }}
          STRAPI_PROXY: ${{ secrets.STRAPI_PROXY || 'true' }}
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST << 'ENDSSH'
            # Navigate to deployment directory
            cd /var/www/html || exit 1

            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Pull latest images
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest

            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              cat > .env << EOF
          STRAPI_APP_KEYS=$STRAPI_APP_KEYS
          STRAPI_API_TOKEN_SALT=$STRAPI_API_TOKEN_SALT
          STRAPI_ADMIN_JWT_SECRET=$STRAPI_ADMIN_JWT_SECRET
          STRAPI_TRANSFER_TOKEN_SALT=$STRAPI_TRANSFER_TOKEN_SALT
          STRAPI_JWT_SECRET=$STRAPI_JWT_SECRET
          STRAPI_API_TOKEN=$STRAPI_API_TOKEN
          NEXT_PUBLIC_STRAPI_URL=$NEXT_PUBLIC_STRAPI_URL
          STRAPI_API_URL=http://strapi:1337
          STRAPI_URL=$STRAPI_URL
          STRAPI_PROXY=$STRAPI_PROXY
          EOF
            fi

            # Zero-downtime deployment: Start new containers before stopping old ones
            # Scale up services with new images
            docker-compose up -d --no-deps --scale strapi=2 --scale nextjs=2 --no-recreate strapi nextjs

            # Wait for health checks to pass on new containers
            echo "Waiting for new containers to be healthy..."
            sleep 30

            # Verify new containers are healthy
            NEW_CONTAINERS_HEALTHY=$(docker ps --filter "name=axerate" --filter "health=healthy" | wc -l)
            if [ $NEW_CONTAINERS_HEALTHY -lt 2 ]; then
              echo "New containers not healthy, rolling back..."
              docker-compose up -d --scale strapi=1 --scale nextjs=1
              exit 1
            fi

            # Scale down to single instance (removes old containers)
            docker-compose up -d --scale strapi=1 --scale nextjs=1 --remove-orphans

            # Restart nginx to ensure it picks up new containers
            docker-compose restart nginx

            # Clean up old images
            docker image prune -af --filter "until=24h"

            # Check if containers are running
            docker-compose ps
          ENDSSH

      - name: Health Check
        run: |
          sleep 30
          curl -f http://${{ secrets.SSH_HOST }}:3000 || exit 1
          curl -f http://${{ secrets.SSH_HOST }}:1337/_health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful"
          else
            echo "❌ Deployment failed"
          fi
